{"version":3,"sources":["components/fn.tsx","components/Availability.tsx","components/ErrorBudget.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["UnitOfTime","Ratio","expandDownTimeTable","downtime","secondsPerWeek","secondsPerDay","minutesPerWeek","minutesPerDay","hoursPerWeek","hoursPerDay","secondsPerMonth","minutesPerMonth","hoursPerMonth","secondsPerNinetyDays","minutesPerNinetyDays","hoursPerNinetyDays","secondsPerYear","minutesPerYear","hoursPerYear","calculateDowntimeTableFromMetric","timePerMetric","metric","Error","getDowntimeFromAvailbility","availability","oriAvailability","percentage","Math","ceil","calculateDowntimeTableFromAvailbility","getDisplay","toFixed","number","fixed","replace","formatTimeToMetric","time","minutes","floor","minutesStr","hours","hoursStr","days","daysStr","FormatTime","props","useState","hover","setHover","seconds","content","onMouseOver","onMouseOut","AvailabilityTable2","downtimeDataSource","key","name","measurement","value","columns","title","align","render","row","split","secondsInMetric","dataIndex","tableLayout","pagination","dataSource","Option","Select","ErrorBudget","SECONDS_PER_DAY","setMetric","display","setDisplay","errorBudget","console","error","calculateAvailability","downtimeTable","errorBudgetRef","useRef","justify","span","ref","size","min","step","onChange","newDowntimeTable","defaultValue","newMetric","newDisplay","oldMetric","changeDisplayFromMetric","max","style","width","newAvailability","current","inputNumberRef","input","setAvailability","App","href","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.71fb610d.chunk.js","sourcesContent":["\nconst DAYS_IN_MONTH = 31;\nconst DAYS_IN_YEAR = 365;\nconst PRECISION = 5;\n\nexport enum UnitOfTime {\n  SECONDS = 'seconds',\n  MINUTES = 'minutes',\n  HOURS = 'hours',\n};\n\nexport enum Ratio {\n  SECONDS_PER_DAY = 'seconds/day',\n  MINUTES_PER_DAY = 'minutes/day',\n  HOURS_PER_DAY = 'hours/day',\n  SECONDS_PER_WEEK = 'seconds/week',\n  MINUTES_PER_WEEK = 'minutes/week',\n  HOURS_PER_WEEK = 'hours/week',\n  SECONDS_PER_MONTH = 'seconds/month',\n  MINUTES_PER_MONTH = 'minutes/month',\n  HOURS_PER_MONTH = 'hours/month',\n  SECONDS_PER_NINETY_DAYS= 'seconds/90 days',\n  MINUTES_PER_NINETY_DAYS = 'minutes/90 days',\n  HOURS_PER_NINETY_DAYS = 'hours/90 days',\n  SECONDS_PER_YEAR = 'seconds/year',\n  MINUTES_PER_YEAR = 'minutes/year',\n  HOURS_PER_YEAR = 'hours/year',\n};\n\nexport interface DowntimeTableDay {\n  secondsPerDay: number,\n  minutesPerDay: number,\n  hoursPerDay: number,\n}\n\nexport interface DowntimeTable extends DowntimeTableDay {\n  secondsPerDay: number,\n  minutesPerDay: number,\n  hoursPerDay: number,\n  secondsPerWeek: number,\n  minutesPerWeek: number,\n  hoursPerWeek: number,\n  secondsPerMonth: number,\n  minutesPerMonth: number,\n  hoursPerMonth: number,\n  secondsPerNinetyDays: number,\n  minutesPerNinetyDays: number,\n  hoursPerNinetyDays: number,\n  secondsPerYear: number,\n  minutesPerYear: number,\n  hoursPerYear: number,\n}\n\nexport function expandDownTimeTable(downtime: DowntimeTableDay): DowntimeTable {\n   const table = {\n    ...downtime,\n    secondsPerWeek: downtime.secondsPerDay * 7,\n    minutesPerWeek: downtime.minutesPerDay * 7,\n    hoursPerWeek: downtime.hoursPerDay * 7,\n    secondsPerMonth: downtime.secondsPerDay * DAYS_IN_MONTH,\n    minutesPerMonth: downtime.minutesPerDay * DAYS_IN_MONTH,\n    hoursPerMonth: downtime.hoursPerDay * DAYS_IN_MONTH,\n    secondsPerNinetyDays: downtime.secondsPerDay * 90,\n    minutesPerNinetyDays: downtime.minutesPerDay * 90,\n    hoursPerNinetyDays: downtime.hoursPerDay * 90,\n    secondsPerYear: downtime.secondsPerDay * DAYS_IN_YEAR,\n    minutesPerYear: downtime.minutesPerDay * DAYS_IN_YEAR,\n    hoursPerYear: downtime.hoursPerDay * DAYS_IN_YEAR,\n  };\n  return table;\n}\n\nexport function calculateDowntimeTableFromAvailbility(oriAvailability: number): DowntimeTable {\n  let availability = oriAvailability >= 100\n    ? 100\n    : oriAvailability;\n\n  availability = availability <= 0\n    ? 0\n    : availability;\n\n  const percentage = (100 - availability) / 100;\n\n  return expandDownTimeTable({\n    secondsPerDay: Math.ceil(percentage * 24 * 60 * 60),\n    minutesPerDay: percentage * 24 * 60,\n    hoursPerDay: percentage * 24,\n  });\n}\n\nexport function calculateDowntimeTableFromSeconds(time: number): DowntimeTable {\n  const percentage = time / (24 * 60 * 60);\n\n  return expandDownTimeTable({\n    secondsPerDay: time,\n    minutesPerDay: percentage * 24 * 60,\n    hoursPerDay: percentage * 24,\n  });\n}\nexport function calculateDowntimeTableFromMetric(timePerMetric: number, metric: Ratio): DowntimeTable {\n  switch (metric) {\n    case 'seconds/day':\n      return expandDownTimeTable({\n        secondsPerDay: timePerMetric,\n        minutesPerDay: timePerMetric / 60,\n        hoursPerDay: timePerMetric / (60 * 60)\n      });\n\n    case 'minutes/day':\n      return expandDownTimeTable({\n        secondsPerDay: timePerMetric * 60,\n        minutesPerDay: timePerMetric,\n        hoursPerDay: timePerMetric / 60,\n      });\n\n    case 'hours/day':\n      return expandDownTimeTable({\n        secondsPerDay: timePerMetric * 60 * 60,\n        minutesPerDay: timePerMetric * 60,\n        hoursPerDay: timePerMetric,\n      });\n\n    case 'seconds/week':\n      return expandDownTimeTable({\n        secondsPerDay: timePerMetric / 7,\n        minutesPerDay: timePerMetric / 60 / 7,\n        hoursPerDay: timePerMetric / (60 * 60) / 7,\n      });\n\n    case 'minutes/week':\n      return expandDownTimeTable({\n        secondsPerDay: timePerMetric * 60 /7,\n        minutesPerDay: timePerMetric / 7,\n        hoursPerDay: timePerMetric / 60 / 7,\n      });\n\n    case 'hours/week':\n      return expandDownTimeTable({\n        secondsPerDay: timePerMetric * 60 * 60 / 7,\n        minutesPerDay: timePerMetric * 60 / 7,\n        hoursPerDay: timePerMetric / 7,\n      });\n\n    case 'seconds/month':\n      return expandDownTimeTable({\n        secondsPerDay: timePerMetric / 31,\n        minutesPerDay: timePerMetric / 60 / 31,\n        hoursPerDay: timePerMetric / (60 * 60 / 31),\n      });\n\n    case 'minutes/month':\n      return expandDownTimeTable({\n        secondsPerDay: timePerMetric * 60 / 31,\n        minutesPerDay: timePerMetric / 31,\n        hoursPerDay: timePerMetric / 60 / 31,\n      });\n\n    case 'hours/month':\n      return expandDownTimeTable({\n        secondsPerDay: timePerMetric * 60 * 60 / 31,\n        minutesPerDay: timePerMetric * 60 / 31,\n        hoursPerDay: timePerMetric / 31,\n      });\n\n    case 'seconds/90 days':\n      return expandDownTimeTable({\n        secondsPerDay: timePerMetric / 90,\n        minutesPerDay: timePerMetric / 60 / 90,\n        hoursPerDay: timePerMetric / (60 * 60) / 90,\n      });\n\n    case 'minutes/90 days':\n      return expandDownTimeTable({\n        secondsPerDay: timePerMetric * 60 / 90,\n        minutesPerDay: timePerMetric / 90,\n        hoursPerDay: timePerMetric / 60 / 90,\n      });\n\n    case 'hours/90 days':\n      return expandDownTimeTable({\n        secondsPerDay: timePerMetric * 60 * 60 / 90,\n        minutesPerDay: timePerMetric * 60 / 90,\n        hoursPerDay: timePerMetric / 90,\n      });\n\n    case 'seconds/year':\n      return expandDownTimeTable({\n        secondsPerDay: timePerMetric / 365,\n        minutesPerDay: timePerMetric / 60 / 365,\n        hoursPerDay: timePerMetric / (60 * 60) / 365,\n      });\n\n    case 'minutes/year':\n      return expandDownTimeTable({\n        secondsPerDay: timePerMetric * 60 / 365,\n        minutesPerDay: timePerMetric / 365,\n        hoursPerDay: timePerMetric / 60 / 365,\n      });\n\n    case 'hours/year':\n      return expandDownTimeTable({\n        secondsPerDay: timePerMetric * 60 * 60 / 365,\n        minutesPerDay: timePerMetric * 60 / 365,\n        hoursPerDay: timePerMetric / 365,\n      });\n\n    default:\n      throw new Error(`Unknown metric: ${metric}`);\n  }\n}\n\nexport function calculateAvailability(errorBudget: number, metric: Ratio) {\n  let downtime = 0;\n  switch (metric) {\n    case 'seconds/day':\n      downtime = errorBudget / (24 * 60 * 60);\n      break;\n \n    case 'minutes/day':\n      downtime = errorBudget / (24 * 60);\n      break;\n\n    case 'hours/day':\n      downtime = errorBudget / 24;\n      break;\n\n    case 'seconds/week':\n      downtime = errorBudget / (24 * 60 * 60 * 7);\n      break;\n \n    case 'minutes/week':\n      downtime = errorBudget / (24 * 60 * 7);\n      break;\n\n    case 'hours/week':\n      downtime = errorBudget / (24 * 7);\n      break;\n\n    case 'seconds/month':\n      downtime = errorBudget / (24 * 60 * 60 * 31);\n      break;\n \n    case 'minutes/month':\n      downtime = errorBudget / (24 * 60 * 31);\n      break;\n\n    case 'hours/month':\n      downtime = errorBudget / (24 * 31);\n      break;\n\n    case 'seconds/90 days':\n      downtime = errorBudget / (24 * 60 * 60 * 90);\n      break;\n \n    case 'minutes/90 days':\n      downtime = errorBudget / (24 * 60 * 90);\n      break;\n\n    case 'hours/90 days':\n      downtime = errorBudget / (24 * 90);\n      break;\n\n    case 'seconds/year':\n      downtime = errorBudget / (24 * 60 * 60 * 365);\n      break;\n \n    case 'minutes/year':\n      downtime = errorBudget / (24 * 60 * 365);\n      break;\n\n    case 'hours/year':\n      downtime = errorBudget / (24 * 365);\n      break;\n    \n    default:\n      console.error(`Unkonwn: ${metric}`)\n      break;\n  }\n\n  downtime = downtime * 100;\n  const availability = 100 - downtime;\n  return availability;\n}\n\nexport function getDowntimeFromAvailbility(availability: number, metric: Ratio) {\n  const downtime = calculateDowntimeTableFromAvailbility(availability);\n  switch (metric) {\n    case 'seconds/day':\n      return downtime.secondsPerDay;\n\n    case 'minutes/day':\n      return downtime.minutesPerDay;\n\n    case 'hours/day':\n      return downtime.hoursPerDay;\n\n    case 'seconds/week':\n      return downtime.secondsPerWeek;\n\n    case 'minutes/week':\n      return downtime.minutesPerWeek;\n\n    case 'hours/week':\n      return downtime.hoursPerWeek;\n\n    case 'seconds/month':\n      return downtime.secondsPerMonth;\n\n    case 'minutes/month':\n      return downtime.minutesPerMonth;\n\n    case 'hours/month':\n      return downtime.hoursPerMonth;\n\n    case 'seconds/90 days':\n      return downtime.secondsPerNinetyDays;\n\n    case 'minutes/90 days':\n      return downtime.minutesPerNinetyDays;\n\n    case 'hours/90 days':\n      return downtime.hoursPerNinetyDays;\n\n    case 'seconds/year':\n      return downtime.secondsPerYear;\n\n    case 'minutes/year':\n      return downtime.minutesPerYear;\n\n    case 'hours/year':\n      return downtime.hoursPerYear;\n    \n    default:\n      return 0;\n  }\n}\n\nexport function getDisplay(downtime: DowntimeTable, metric: Ratio): number {\n  switch (metric) {\n    case 'seconds/day':\n      return downtime.secondsPerDay;\n\n    case 'minutes/day':\n      return downtime.minutesPerDay;\n\n    case 'hours/day':\n      return downtime.hoursPerDay;\n\n    case 'seconds/week':\n      return downtime.secondsPerWeek;\n\n    case 'minutes/week':\n      return downtime.minutesPerWeek;\n\n    case 'hours/week':\n      return downtime.hoursPerWeek;\n\n    case 'seconds/month':\n      return downtime.secondsPerMonth;\n\n    case 'minutes/month':\n      return downtime.minutesPerMonth;\n\n    case 'hours/month':\n      return downtime.hoursPerMonth;\n\n    case 'seconds/90 days':\n      return downtime.secondsPerNinetyDays;\n\n    case 'minutes/90 days':\n      return downtime.minutesPerNinetyDays;\n\n    case 'hours/90 days':\n      return downtime.hoursPerNinetyDays;\n\n    case 'seconds/year':\n      return downtime.secondsPerYear;\n\n    case 'minutes/year':\n      return downtime.minutesPerYear;\n\n    case 'hours/year':\n      return downtime.hoursPerYear;\n    \n    default:\n      throw new Error(`Unknown metric: ${metric}`);\n  }\n}\n\nexport function changeDisplayFromMetric(display: number, oldMetric: Ratio, newMetric: Ratio): number {\n  const downtime = calculateDowntimeTableFromMetric(display, oldMetric);\n  return getDisplay(downtime, newMetric);\n}\n\nexport function calculateSecondsFromMetric(time: number, unitOfTime: UnitOfTime) {\n  switch (unitOfTime) {\n    case 'seconds':\n      return time;\n\n    case 'minutes':\n      return time * 60;\n\n    case 'hours':\n      return time * 60 * 60;\n\n    default:\n      throw new Error(`Unknown metric: ${unitOfTime}`);\n  }\n}\n\nexport function formatTime(time: number) {\n  const seconds = Math.ceil(time % 60);\n  const minutes = Math.floor(time / 60 % 60);\n  const hours = Math.floor(time / 3600);\n\n  let str = '';\n  let displayMinutes = hours || minutes;\n  if (hours) {\n    str += `${hours}h`;\n  }\n  if (displayMinutes) {\n    str += `${minutes}m`\n  }\n  const ms = seconds === 0 ? '' : ` x ${(time / 1000).toFixed(5)}`;\n  return `${str}${seconds}${ms}s`;\n}\n\nfunction toFixed(number: number): string {\n  if (number % 1 === 0) {\n    return `${number}`\n  }\n  let fixed = number.toFixed(PRECISION);\n  fixed = fixed.replace(/0+$/, '');\n  fixed = fixed.replace(/\\.+$/, '');\n  return fixed;\n}\n\nexport function formatTimeToMetric(time: number, metric: string) {\n  switch (metric) {\n    case 'seconds':\n      return `${toFixed(time)}s`;\n\n    case 'minutes': {\n      const minutes = Math.floor(time / 60);\n\n      const minutesStr = minutes ? `${minutes}m ` : ''\n\n      return `${minutesStr}${toFixed(time % 60)}s`;\n    }\n\n    case 'hours': {\n      const minutes = Math.floor(time / 60 % 60);\n      const hours = Math.floor(time / (60 * 60));\n\n      const hoursStr = hours ? `${hours}h ` : ''\n\n      return `${hoursStr}${minutes}m ${toFixed(time % 60)}s`;\n    }\n\n    case 'days': {\n      const minutes = Math.floor(time / 60 % 60);\n      const hours = Math.floor(time / (60 * 60) % 24);\n      const days = Math.floor(time / (60 * 60 * 24));\n\n      const hoursStr = hours ? `${hours}h ` : ''\n      const daysStr = days ? `${days}d ` : ''\n\n      return `${daysStr}${hoursStr}${minutes}m ${toFixed(time % 60)}s`;\n    }\n  }\n}","import { Table } from 'antd';\nimport React, { useState } from 'react';\nimport { formatTimeToMetric, DowntimeTable } from './fn';\n\nexport const FormatTime: React.FC<{time: number}> = (props) => {\n  const [hover, setHover] = useState(false);\n  const { time } = props;\n\n  const seconds = formatTimeToMetric(time, 'seconds');\n  const minutes = formatTimeToMetric(time, 'minutes');\n  const hours = formatTimeToMetric(time, 'hours');\n  const days = formatTimeToMetric(time, 'days');\n\n  const content = hover\n    ? <>\n        {days !== hours ? `${days}, or ` : ''}\n        {hours !== minutes ? `${hours}, or ` : ''}\n        {minutes}\n        {', or '}\n        {seconds}\n      </>\n    : days;\n\n\n  return (\n    <div\n      // title={title}\n      onMouseOver={() => setHover(true)}\n      onMouseOut={() =>setHover(false)}\n      >\n      {content}\n    </div>\n  );\n}\n\nexport const AvailabilityTable2: React.FC<{downtime: DowntimeTable}> = (props) => {\n  const { downtime } = props;\n\n  // const downtime = calculateDowntimeTableFromAvailbility(availability);\n  const downtimeDataSource = [\n    {\n      key: 'hoursPerDay',\n      name: 'Hours Per Day',\n      measurement: 'hours/day',\n      // value: downtime.hoursPerDay,\n      value: downtime.secondsPerDay,\n    },\n    {\n      key: 'hoursPerWeek',\n      name: 'Hours Per Week',\n      measurement: 'hours/week',\n      // value: downtime.hoursPerWeek,\n      value: downtime.secondsPerWeek,\n    },\n    {\n      key: 'hoursPerMonth',\n      name: 'Hours Per Month',\n      measurement: 'hours/month',\n      // value: downtime.hoursPerMonth,\n      value: downtime.secondsPerMonth,\n    },\n    {\n      key: 'hoursPerNinetyDays',\n      name: 'Hours Per NinetyDays',\n      measurement: 'hours/90 days',\n      // value: downtime.hoursPerNinetyDays,\n      value: downtime.secondsPerNinetyDays,\n    },\n    {\n      key: 'hoursPerYear',\n      name: 'Hours Per Year',\n      measurement: 'hours/year',\n      // value: downtime.hoursPerYear,\n      value: downtime.secondsPerYear,\n    },\n  ];\n\n  const columns = [\n    {\n      title: 'Uptime',\n      align: 'right',\n      render: (row: any) => {\n        const [,metric] = row.measurement.split('/');\n        let secondsInMetric = 86400;\n        switch (metric) {\n          case 'day':\n            break;\n\n          case 'week':\n            secondsInMetric *= 7;\n            break;\n\n          case 'month':\n            secondsInMetric *= 31;\n            break;\n\n          case '90 days':\n            secondsInMetric *= 90;\n            break;\n\n          case 'year':\n            secondsInMetric *= 365;\n            break;\n        }\n        return <FormatTime time={secondsInMetric - row.value} />;\n      },\n    },\n    {\n      title: 'Downtime',\n      align: 'right',\n      render: (row: any) => {\n        return <FormatTime time={row.value} />;\n      },\n    },\n    {\n      title: 'Measurement',\n      dataIndex: 'measurement',\n      render: (measurement: string) => {\n        const [,metric] = measurement.split('/')\n        return `per ${metric}`;\n      },\n    },\n  ];\n\n  return (\n    <Table\n      tableLayout=\"fixed\"\n      pagination={false}\n      dataSource={downtimeDataSource}\n      // @ts-ignore\n      columns={columns}\n    />\n  );\n}","import React, { useState, useRef } from 'react';\nimport { Select, InputNumber, Row, Col } from 'antd';\nimport { AvailabilityTable2 } from './Availability';\nimport { calculateAvailability, getDowntimeFromAvailbility, calculateDowntimeTableFromMetric, changeDisplayFromMetric, Ratio, getDisplay } from './fn';\n\nconst { Option } = Select;\n\nexport const ErrorBudget: React.FC = () => {\n  const [metric, setMetric] = useState<Ratio>(Ratio.SECONDS_PER_DAY);\n  const [display, setDisplay] = useState(60);\n  const availability = calculateAvailability(display, metric);\n  // @ts-ignore\n  const downtimeTable = calculateDowntimeTableFromMetric(display, metric);\n  \n  const errorBudgetRef = useRef<any>();\n\n  const setAvailability = (newAvailability: number) => {\n    const current = errorBudgetRef.current;\n    if (!current) {\n      return;\n    }\n\n    const newDisplay = getDowntimeFromAvailbility(newAvailability, metric);\n    current.inputNumberRef.input.value = newDisplay;\n    setDisplay(newDisplay);\n  }\n\n  return (\n    <>\n      <Row justify=\"center\">\n        <Col span=\"8\">\n          <div>\n            <InputNumber\n              ref={errorBudgetRef}\n              size=\"large\"\n              value={display}\n              min={0}\n              step={0.1}\n              onChange={(value) => {\n                if (!value) {\n                  return;\n                }\n                const newDowntimeTable = calculateDowntimeTableFromMetric(value, metric);\n                setDisplay(getDisplay(newDowntimeTable, metric));\n              }}\n            />\n            <Select\n              defaultValue={metric}\n              size=\"large\"\n              onChange={(newMetric) => {\n                const newDisplay = changeDisplayFromMetric(display, metric, newMetric);\n                setMetric(newMetric);\n                setDisplay(newDisplay);\n              }}>\n              <Option value=\"seconds/day\">\n                seconds/day\n              </Option>\n              <Option value=\"minutes/day\">\n                minutes/day\n              </Option>\n              <Option value=\"hours/day\">\n                hours/day\n              </Option>\n              <Option value=\"seconds/week\">\n                seconds/week\n              </Option>\n              <Option value=\"minutes/week\">\n                minutes/week\n              </Option>\n              <Option value=\"hours/week\">\n                hours/week\n              </Option>\n              <Option value=\"seconds/month\">\n                seconds/month\n              </Option>\n              <Option value=\"minutes/month\">\n                minutes/month\n              </Option>\n              <Option value=\"hours/month\">\n                hours/month\n              </Option>\n              <Option value=\"seconds/90 days\">\n                seconds/90 days\n              </Option>\n              <Option value=\"minutes/90 days\">\n                minutes/90 days\n              </Option>\n              <Option value=\"hours/90 days\">\n                hours/90 days\n              </Option>\n              <Option value=\"seconds/year\">\n                seconds/year\n              </Option>\n              <Option value=\"minutes/year\">\n                minutes/year\n              </Option>\n              <Option value=\"hours/year\">\n                hours/year\n              </Option>\n            </Select>\n          </div>\n          <div>\n            <InputNumber\n              size=\"large\"\n              value={availability}\n              min={0}\n              max={100}\n              step={0.1}\n              style={{width: '14rem'}}\n              onChange={(value) => {\n                if (!value) {\n                  return;\n                }\n\n                setAvailability(value);\n              }}\n            />\n            %\n          </div>\n        </Col>\n      </Row>\n      <AvailabilityTable2 downtime={downtimeTable} />\n    </>\n  ) \n}","import React from 'react';\nimport './App.css';\nimport { ErrorBudget } from './components/ErrorBudget';\n\nfunction App() {\n  return (\n    <>\n      <ErrorBudget />\n      <ul>\n        <li>There may be some rounding errors, because we calculate the time based on availability.</li>\n        <li><a href=\"https://github.com/aizatto/error-budget\">GitHub: Source Code</a></li>\n      </ul>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}