{"version":3,"sources":["components/fn.tsx","components/Availability.tsx","components/ErrorBudget.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["calculateDowntime","oriAvailability","availability","percentage","downtime","secondsPerDay","minutesPerDay","hoursPerDay","secondsPerWeek","minutesPerWeek","hoursPerWeek","secondsPerMonth","minutesPerMonth","hoursPerMonth","secondsPerYear","minutesPerYear","hoursPerYear","getDowntimeFromAvailbility","metric","AvailabilityTable","props","downtimeDataSource","key","name","shorthand","value","columns","title","dataIndex","align","render","toFixed","pagination","dataSource","Option","Select","ErrorBudget","useState","setMetric","errorBudget","setErrorBudget","calculateAvailability","errorBudgetRef","useRef","justify","span","ref","size","min","step","onChange","defaultValue","newMetric","max","style","width","current","setErrorBudgetRef","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a025dfdb.chunk.js","sourcesContent":["\nconst DAYS_IN_MONTH = 31;\nconst DAYS_IN_YEAR = 365;\n\nexport function calculateDowntime(oriAvailability: number) {\n  let availability = oriAvailability >= 100\n    ? 100\n    : oriAvailability;\n\n  availability = availability <= 0\n    ? 0\n    : availability;\n\n  const percentage = (100 - availability) / 100;\n\n  let downtime = {\n    secondsPerDay: percentage * 24 * 60 * 60,\n    minutesPerDay: percentage * 24 * 60,\n    hoursPerDay: percentage * 24,\n  }\n\n  return {\n    ...downtime,\n    secondsPerWeek: downtime.secondsPerDay * 7,\n    minutesPerWeek: downtime.minutesPerDay * 7,\n    hoursPerWeek: downtime.hoursPerDay * 7,\n    secondsPerMonth: downtime.secondsPerDay * DAYS_IN_MONTH,\n    minutesPerMonth: downtime.minutesPerDay * DAYS_IN_MONTH,\n    hoursPerMonth: downtime.hoursPerDay * DAYS_IN_MONTH,\n    secondsPerYear: downtime.secondsPerDay * DAYS_IN_YEAR,\n    minutesPerYear: downtime.minutesPerDay * DAYS_IN_YEAR,\n    hoursPerYear: downtime.hoursPerDay * DAYS_IN_YEAR,\n  };\n}\n\n\nexport function calculateAvailability(errorBudget: number, metric: string) {\n  let downtime = 0;\n  switch (metric) {\n    case 'seconds/day':\n      downtime = errorBudget / (24 * 60 * 60);\n      break;\n \n    case 'minutes/day':\n      downtime = errorBudget / (24 * 60);\n      break;\n\n    case 'hours/day':\n      downtime = errorBudget / 24;\n      break;\n\n    case 'seconds/week':\n      downtime = errorBudget / (24 * 60 * 60 * 7);\n      break;\n \n    case 'minutes/week':\n      downtime = errorBudget / (24 * 60 * 7);\n      break;\n\n    case 'hours/week':\n      downtime = errorBudget / (24 * 7);\n      break;\n\n    case 'seconds/month':\n      downtime = errorBudget / (24 * 60 * 60 * 31);\n      break;\n \n    case 'minutes/month':\n      downtime = errorBudget / (24 * 60 * 31);\n      break;\n\n    case 'hours/month':\n      downtime = errorBudget / (24 * 31);\n      break;\n\n    case 'seconds/year':\n      downtime = errorBudget / (24 * 60 * 60 * 365);\n      break;\n \n    case 'minutes/year':\n      downtime = errorBudget / (24 * 60 * 365);\n      break;\n\n    case 'hours/year':\n      downtime = errorBudget / (24 * 365);\n      break;\n  }\n\n  downtime = downtime * 100;\n  const availability = 100 - downtime;\n  return availability;\n}\n\nexport function getDowntimeFromAvailbility(availability: number, metric: string) {\n  const downtime = calculateDowntime(availability);\n  switch (metric) {\n    case 'seconds/day':\n      return downtime.secondsPerDay;\n\n    case 'minutes/day':\n      return downtime.minutesPerDay;\n\n    case 'hours/day':\n      return downtime.hoursPerDay;\n\n    case 'seconds/week':\n      return downtime.secondsPerWeek;\n\n    case 'minutes/week':\n      return downtime.minutesPerWeek;\n\n    case 'hours/week':\n      return downtime.hoursPerWeek;\n\n    case 'seconds/month':\n      return downtime.secondsPerMonth;\n\n    case 'minutes/month':\n      return downtime.minutesPerMonth;\n\n    case 'hours/month':\n      return downtime.hoursPerMonth;\n\n    case 'seconds/year':\n      return downtime.secondsPerYear;\n\n    case 'minutes/year':\n      return downtime.minutesPerYear;\n\n    case 'hours/year':\n      return downtime.hoursPerYear;\n    \n    default:\n      return 0;\n  }\n}","import { InputNumber, Table, Row, Col } from 'antd';\nimport React, { useState } from 'react';\nimport { calculateDowntime } from './fn';\n\nconst PRECISION = 3;\n\nexport const AvailabilityTable: React.FC<{availability: number}> = (props) => {\n  const { availability } = props;\n\n  const downtime = calculateDowntime(availability);\n  const downtimeDataSource = [\n    {\n      key: 'secondsPerDay',\n      name: 'Seconds Per Day',\n      shorthand: 'seconds/day',\n      value: downtime.secondsPerDay,\n    },\n    {\n      key: 'minutesPerDay',\n      name: 'Minutes Per Day',\n      shorthand: 'minutes/day',\n      value: downtime.minutesPerDay,\n    },\n    {\n      key: 'hoursPerDay',\n      name: 'Hours Per Day',\n      shorthand: 'hours/day',\n      value: downtime.hoursPerDay,\n    },\n    {\n      key: 'secondsPerWeek',\n      name: 'Seconds Per Week',\n      shorthand: 'seconds/week',\n      value: downtime.secondsPerWeek,\n    },\n    {\n      key: 'minutesPerWeek',\n      name: 'Minutes Per Week',\n      shorthand: 'minutes/week',\n      value: downtime.minutesPerWeek,\n    },\n    {\n      key: 'hoursPerWeek',\n      name: 'Hours Per Week',\n      shorthand: 'hours/week',\n      value: downtime.hoursPerWeek,\n    },\n    {\n      key: 'secondsPerMonth',\n      name: 'Seconds Per Month',\n      shorthand: 'seconds/month',\n      value: downtime.secondsPerMonth,\n    },\n    {\n      key: 'minutesPerMonth',\n      name: 'Minutes Per Month',\n      shorthand: 'weeks/month',\n      value: downtime.minutesPerMonth,\n    },\n    {\n      key: 'hoursPerMonth',\n      name: 'Hours Per Month',\n      shorthand: 'hours/month',\n      value: downtime.hoursPerMonth,\n    },\n    {\n      key: 'secondsPerYear',\n      name: 'Seconds Per Year',\n      shorthand: 'seconds/year',\n      value: downtime.secondsPerYear,\n    },\n    {\n      key: 'minutesPerYear',\n      name: 'Minutes Per Year',\n      shorthand: 'minutes/year',\n      value: downtime.minutesPerYear,\n    },\n    {\n      key: 'hoursPerYear',\n      name: 'Hours Per Year',\n      shorthand: 'hours/year',\n      value: downtime.hoursPerYear,\n    },\n  ];\n\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n    },\n    {\n      title: 'Downtime',\n      dataIndex: 'value',\n      align: 'right',\n      render: (value: number) => value.toFixed(PRECISION),\n    },\n    {\n      title: 'Shorthand',\n      dataIndex: 'shorthand',\n    },\n  ];\n\n  return (\n    <Table\n      pagination={false}\n      dataSource={downtimeDataSource}\n      // @ts-ignore\n      columns={columns}\n    />\n  );\n}\n\nexport const Availability: React.FC = () => {\n  const [availability, setAvailability] = useState(99.99);\n\n  return (\n    <>\n      <Row justify=\"center\">\n        <Col span=\"6\">\n          <InputNumber\n            style={{fontSize: '2rem', width: '12rem'}}\n            defaultValue={availability}\n            min={0}\n            max={100}\n            step={0.1}\n            onChange={(value) => value && setAvailability(value)}\n          />\n          %\n        </Col>\n      </Row>\n      <AvailabilityTable availability={availability} />\n    </>\n  );\n}","import React, { useState, useRef } from 'react';\nimport { Select, InputNumber, Row, Col } from 'antd';\nimport { AvailabilityTable } from './Availability';\nimport { calculateAvailability, getDowntimeFromAvailbility } from './fn';\n\nconst { Option } = Select;\n\nexport const ErrorBudget: React.FC = () => {\n  const [metric, setMetric] = useState('seconds/day');\n  const [errorBudget, setErrorBudget] = useState(60);\n  const availability = calculateAvailability(errorBudget, metric);\n  \n  const errorBudgetRef = useRef<any>();\n\n  const setErrorBudgetRef = (value: number) => {\n    const current = errorBudgetRef.current;\n    if (!current) {\n      return;\n    }\n\n    const downtime = getDowntimeFromAvailbility(value, metric);\n    // current.inputNumberRef.input.value = downtime;\n    setErrorBudget(downtime);\n  }\n\n  return (\n    <>\n      <Row justify=\"center\">\n        <Col span=\"8\">\n          <div>\n            <InputNumber\n              ref={errorBudgetRef}\n              size=\"large\"\n              value={errorBudget}\n              min={0}\n              step={0.1}\n              onChange={(value) => value && setErrorBudget(value)}\n            />\n            <Select\n              defaultValue={metric}\n              size=\"large\"\n              onChange={(newMetric) => {\n                const downtime = getDowntimeFromAvailbility(availability, newMetric);\n                setMetric(newMetric);\n                setErrorBudget(downtime);\n              }}>\n              <Option value=\"seconds/day\">\n                seconds/day\n              </Option>\n              <Option value=\"minutes/day\">\n                minutes/day\n              </Option>\n              <Option value=\"hours/day\">\n                hours/day\n              </Option>\n              <Option value=\"seconds/week\">\n                seconds/week\n              </Option>\n              <Option value=\"minutes/week\">\n                minutes/week\n              </Option>\n              <Option value=\"hours/week\">\n                hours/week\n              </Option>\n              <Option value=\"seconds/month\">\n                seconds/month\n              </Option>\n              <Option value=\"minutes/month\">\n                minutes/month\n              </Option>\n              <Option value=\"hours/month\">\n                hours/month\n              </Option>\n              <Option value=\"seconds/year\">\n                seconds/year\n              </Option>\n              <Option value=\"minutes/year\">\n                minutes/year\n              </Option>\n              <Option value=\"hours/year\">\n                hours/year\n              </Option>\n            </Select>\n          </div>\n          <div>\n            <InputNumber\n              size=\"large\"\n              value={availability}\n              min={0}\n              max={100}\n              step={0.1}\n              style={{width: '14rem'}}\n              onChange={(value) => {\n                if (!value) {\n                  return;\n                }\n\n                // setErrorBudgetRef(getDowntimeFromAvailbility(value, metric));\n                setErrorBudgetRef(value);\n              }}\n            />\n            %\n          </div>\n        </Col>\n      </Row>\n      <AvailabilityTable availability={availability} />\n    </>\n  ) \n}","import React from 'react';\nimport './App.css';\nimport { ErrorBudget } from './components/ErrorBudget';\n\nfunction App() {\n  return (\n    <>\n      <ErrorBudget />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}