{"version":3,"sources":["components/fn.tsx","components/Availability.tsx","components/ErrorBudget.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["calculateDowntimeTableFromAvailbility","oriAvailability","availability","percentage","downtime","secondsPerDay","Math","ceil","minutesPerDay","hoursPerDay","secondsPerWeek","minutesPerWeek","hoursPerWeek","secondsPerMonth","minutesPerMonth","hoursPerMonth","secondsPerYear","minutesPerYear","hoursPerYear","getDowntimeFromAvailbility","metric","getDowntimeFromSeconds","time","calculateDowntimeTableFromSeconds","toFixed","number","fixed","replace","formatTimeToMetric","minutes","floor","minutesStr","hours","hoursStr","FormatTime","props","useState","hover","setHover","seconds","content","onMouseOver","onMouseOut","AvailabilityTable2","downtimeDataSource","key","name","shorthand","value","columns","title","align","render","row","split","secondsInMetric","dataIndex","tableLayout","pagination","dataSource","Option","Select","ErrorBudget","setMetric","setSecondsPerDay","display","setDisplay","errorBudget","calculateAvailability","downtimeTable","timePerDay","calculateDowntimeTableFromMetric","errorBudgetRef","useRef","justify","span","ref","size","min","step","onChange","newSeconds","calculateSecondsFromMetric","newDisplay","defaultValue","newMetric","max","style","width","newAvailability","current","inputNumberRef","input","setAvailability","App","href","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.768f4ad2.chunk.js","sourcesContent":["\nconst DAYS_IN_MONTH = 31;\nconst DAYS_IN_YEAR = 365;\nconst PRECISION = 5;\n\nexport interface DowntimeTable {\n  secondsPerDay: number,\n  minutesPerDay: number,\n  hoursPerDay: number,\n  secondsPerWeek: number,\n  minutesPerWeek: number,\n  hoursPerWeek: number,\n  secondsPerMonth: number,\n  minutesPerMonth: number,\n  hoursPerMonth: number,\n  secondsPerYear: number,\n  minutesPerYear: number,\n  hoursPerYear: number,\n}\n\nexport function calculateDowntimeTableFromAvailbility(oriAvailability: number): DowntimeTable {\n  let availability = oriAvailability >= 100\n    ? 100\n    : oriAvailability;\n\n  availability = availability <= 0\n    ? 0\n    : availability;\n\n  const percentage = (100 - availability) / 100;\n\n  let downtime = {\n    secondsPerDay: Math.ceil(percentage * 24 * 60 * 60),\n    minutesPerDay: percentage * 24 * 60,\n    hoursPerDay: percentage * 24,\n  }\n\n  const table = {\n    ...downtime,\n    secondsPerWeek: downtime.secondsPerDay * 7,\n    minutesPerWeek: downtime.minutesPerDay * 7,\n    hoursPerWeek: downtime.hoursPerDay * 7,\n    secondsPerMonth: downtime.secondsPerDay * DAYS_IN_MONTH,\n    minutesPerMonth: downtime.minutesPerDay * DAYS_IN_MONTH,\n    hoursPerMonth: downtime.hoursPerDay * DAYS_IN_MONTH,\n    secondsPerYear: downtime.secondsPerDay * DAYS_IN_YEAR,\n    minutesPerYear: downtime.minutesPerDay * DAYS_IN_YEAR,\n    hoursPerYear: downtime.hoursPerDay * DAYS_IN_YEAR,\n  };\n  return table;\n}\n\nexport function calculateDowntimeTableFromSeconds(time: number): DowntimeTable {\n  const percentage = time / (24 * 60 * 60);\n\n  let downtime = {\n    secondsPerDay: time,\n    minutesPerDay: percentage * 24 * 60,\n    hoursPerDay: percentage * 24,\n  }\n\n  const table = {\n    ...downtime,\n    secondsPerWeek: downtime.secondsPerDay * 7,\n    minutesPerWeek: downtime.minutesPerDay * 7,\n    hoursPerWeek: downtime.hoursPerDay * 7,\n    secondsPerMonth: downtime.secondsPerDay * DAYS_IN_MONTH,\n    minutesPerMonth: downtime.minutesPerDay * DAYS_IN_MONTH,\n    hoursPerMonth: downtime.hoursPerDay * DAYS_IN_MONTH,\n    secondsPerYear: downtime.secondsPerDay * DAYS_IN_YEAR,\n    minutesPerYear: downtime.minutesPerDay * DAYS_IN_YEAR,\n    hoursPerYear: downtime.hoursPerDay * DAYS_IN_YEAR,\n  };\n  return table;\n}\nexport function calculateDowntimeTableFromMetric(timePerDay: number, metric: string): DowntimeTable {\n  let downtime = {\n    secondsPerDay: timePerDay,\n    minutesPerDay: timePerDay / 24 * 60,\n    hoursPerDay: timePerDay / 24 * 60 * 60,\n  }\n\n  switch (metric) {\n    case 'minutes':\n      downtime = {\n        secondsPerDay: timePerDay * 60,\n        minutesPerDay: timePerDay,\n        hoursPerDay: timePerDay / (24 * 60),\n      }\n      break;\n\n    case 'hours':\n      downtime = {\n        secondsPerDay: timePerDay * 60 * 60,\n        minutesPerDay: timePerDay * 60,\n        hoursPerDay: timePerDay,\n      }\n      break;\n  }\n\n  const table = {\n    ...downtime,\n    secondsPerWeek: downtime.secondsPerDay * 7,\n    minutesPerWeek: downtime.minutesPerDay * 7,\n    hoursPerWeek: downtime.hoursPerDay * 7,\n    secondsPerMonth: downtime.secondsPerDay * DAYS_IN_MONTH,\n    minutesPerMonth: downtime.minutesPerDay * DAYS_IN_MONTH,\n    hoursPerMonth: downtime.hoursPerDay * DAYS_IN_MONTH,\n    secondsPerYear: downtime.secondsPerDay * DAYS_IN_YEAR,\n    minutesPerYear: downtime.minutesPerDay * DAYS_IN_YEAR,\n    hoursPerYear: downtime.hoursPerDay * DAYS_IN_YEAR,\n  };\n  return table;\n}\n\nexport function calculateAvailability(errorBudget: number, metric: string) {\n  let downtime = 0;\n  switch (metric) {\n    case 'seconds/day':\n      downtime = errorBudget / (24 * 60 * 60);\n      break;\n \n    case 'minutes/day':\n      downtime = errorBudget / (24 * 60);\n      break;\n\n    case 'hours/day':\n      downtime = errorBudget / 24;\n      break;\n\n    case 'seconds/week':\n      downtime = errorBudget / (24 * 60 * 60 * 7);\n      break;\n \n    case 'minutes/week':\n      downtime = errorBudget / (24 * 60 * 7);\n      break;\n\n    case 'hours/week':\n      downtime = errorBudget / (24 * 7);\n      break;\n\n    case 'seconds/month':\n      downtime = errorBudget / (24 * 60 * 60 * 31);\n      break;\n \n    case 'minutes/month':\n      downtime = errorBudget / (24 * 60 * 31);\n      break;\n\n    case 'hours/month':\n      downtime = errorBudget / (24 * 31);\n      break;\n\n    case 'seconds/year':\n      downtime = errorBudget / (24 * 60 * 60 * 365);\n      break;\n \n    case 'minutes/year':\n      downtime = errorBudget / (24 * 60 * 365);\n      break;\n\n    case 'hours/year':\n      downtime = errorBudget / (24 * 365);\n      break;\n  }\n\n  downtime = downtime * 100;\n  const availability = 100 - downtime;\n  return availability;\n}\n\nexport function getDowntimeFromAvailbility(availability: number, metric: string) {\n  const downtime = calculateDowntimeTableFromAvailbility(availability);\n  switch (metric) {\n    case 'seconds/day':\n      return downtime.secondsPerDay;\n\n    case 'minutes/day':\n      return downtime.minutesPerDay;\n\n    case 'hours/day':\n      return downtime.hoursPerDay;\n\n    case 'seconds/week':\n      return downtime.secondsPerWeek;\n\n    case 'minutes/week':\n      return downtime.minutesPerWeek;\n\n    case 'hours/week':\n      return downtime.hoursPerWeek;\n\n    case 'seconds/month':\n      return downtime.secondsPerMonth;\n\n    case 'minutes/month':\n      return downtime.minutesPerMonth;\n\n    case 'hours/month':\n      return downtime.hoursPerMonth;\n\n    case 'seconds/year':\n      return downtime.secondsPerYear;\n\n    case 'minutes/year':\n      return downtime.minutesPerYear;\n\n    case 'hours/year':\n      return downtime.hoursPerYear;\n    \n    default:\n      return 0;\n  }\n}\n\nexport function getDowntimeFromSeconds(time: number, metric: string) {\n  const downtime = calculateDowntimeTableFromSeconds(time);\n  switch (metric) {\n    case 'seconds/day':\n      return downtime.secondsPerDay;\n\n    case 'minutes/day':\n      return downtime.minutesPerDay;\n\n    case 'hours/day':\n      return downtime.hoursPerDay;\n\n    case 'seconds/week':\n      return downtime.secondsPerWeek;\n\n    case 'minutes/week':\n      return downtime.minutesPerWeek;\n\n    case 'hours/week':\n      return downtime.hoursPerWeek;\n\n    case 'seconds/month':\n      return downtime.secondsPerMonth;\n\n    case 'minutes/month':\n      return downtime.minutesPerMonth;\n\n    case 'hours/month':\n      return downtime.hoursPerMonth;\n\n    case 'seconds/year':\n      return downtime.secondsPerYear;\n\n    case 'minutes/year':\n      return downtime.minutesPerYear;\n\n    case 'hours/year':\n      return downtime.hoursPerYear;\n    \n    default:\n      return 0;\n  }\n}\n\nexport function calculateSecondsFromMetric(time: number, metric: string) {\n  switch (metric) {\n    case 'seconds':\n      return time;\n\n    case 'minutes':\n      return time * 60;\n\n    case 'hours':\n      return time * 60 * 60;\n\n    default:\n      return 0;\n  }\n}\n\nexport function formatTime(time: number) {\n  const seconds = Math.ceil(time % 60);\n  const minutes = Math.floor(time / 60 % 60);\n  const hours = Math.floor(time / 3600);\n\n  let str = '';\n  let displayMinutes = hours || minutes;\n  if (hours) {\n    str += `${hours}h`;\n  }\n  if (displayMinutes) {\n    str += `${minutes}m`\n  }\n  const ms = seconds === 0 ? '' : ` x ${(time / 1000).toFixed(5)}`;\n  return `${str}${seconds}${ms}s`;\n}\n\nfunction toFixed(number: number): string {\n  if (number % 1 === 0) {\n    return `${number}`\n  }\n  let fixed = number.toFixed(PRECISION);\n  fixed = fixed.replace(/0+$/, '');\n  fixed = fixed.replace(/\\.+$/, '');\n  return fixed;\n}\n\nexport function formatTimeToMetric(time: number, metric: string) {\n  switch (metric) {\n    case 'seconds':\n      return `${toFixed(time)}s`;\n\n    case 'minutes': {\n      const minutes = Math.floor(time / 60);\n\n      const minutesStr = minutes ? `${minutes}m` : ''\n\n      return `${minutesStr}${toFixed(time % 60)}s`;\n    }\n\n    case 'hours': {\n      const minutes = Math.floor(time / 60 % 60);\n      const hours = Math.floor(time / (60 * 60));\n\n      const hoursStr = hours ? `${hours}h` : ''\n\n      return `${hoursStr}${minutes}m${toFixed(time % 60)}s`;\n    }\n  }\n}","import { InputNumber, Table, Row, Col } from 'antd';\nimport React, { useState } from 'react';\nimport { calculateDowntimeTableFromAvailbility, formatTimeToMetric, DowntimeTable } from './fn';\n\nexport const AvailabilityTable: React.FC<{availability: number}> = (props) => {\n  const { availability } = props;\n\n  const downtime = calculateDowntimeTableFromAvailbility(availability);\n  const downtimeDataSource = [\n    {\n      key: 'secondsPerDay',\n      name: 'Seconds Per Day',\n      shorthand: 'seconds/day',\n      value: downtime.secondsPerDay,\n    },\n    {\n      key: 'minutesPerDay',\n      name: 'Minutes Per Day',\n      shorthand: 'minutes/day',\n      // value: downtime.minutesPerDay,\n      value: downtime.secondsPerDay,\n    },\n    {\n      key: 'hoursPerDay',\n      name: 'Hours Per Day',\n      shorthand: 'hours/day',\n      // value: downtime.hoursPerDay,\n      value: downtime.secondsPerDay,\n    },\n    {\n      key: 'secondsPerWeek',\n      name: 'Seconds Per Week',\n      shorthand: 'seconds/week',\n      value: downtime.secondsPerWeek,\n    },\n    {\n      key: 'minutesPerWeek',\n      name: 'Minutes Per Week',\n      shorthand: 'minutes/week',\n      // value: downtime.minutesPerWeek,\n      value: downtime.secondsPerWeek,\n    },\n    {\n      key: 'hoursPerWeek',\n      name: 'Hours Per Week',\n      shorthand: 'hours/week',\n      // value: downtime.hoursPerWeek,\n      value: downtime.secondsPerWeek,\n    },\n    {\n      key: 'secondsPerMonth',\n      name: 'Seconds Per Month',\n      shorthand: 'seconds/month',\n      value: downtime.secondsPerMonth,\n    },\n    {\n      key: 'minutesPerMonth',\n      name: 'Minutes Per Month',\n      shorthand: 'minutes/month',\n      // value: downtime.minutesPerMonth,\n      value: downtime.secondsPerMonth,\n    },\n    {\n      key: 'hoursPerMonth',\n      name: 'Hours Per Month',\n      shorthand: 'hours/month',\n      // value: downtime.hoursPerMonth,\n      value: downtime.secondsPerMonth,\n    },\n    {\n      key: 'secondsPerYear',\n      name: 'Seconds Per Year',\n      shorthand: 'seconds/year',\n      value: downtime.secondsPerYear,\n    },\n    {\n      key: 'minutesPerYear',\n      name: 'Minutes Per Year',\n      shorthand: 'minutes/year',\n      // value: downtime.minutesPerYear,\n      value: downtime.secondsPerYear,\n    },\n    {\n      key: 'hoursPerYear',\n      name: 'Hours Per Year',\n      shorthand: 'hours/year',\n      // value: downtime.hoursPerYear,\n      value: downtime.secondsPerYear,\n    },\n  ];\n\n  const columns = [\n    // {\n    //   title: 'Name',\n    //   dataIndex: 'name',\n    // },\n    {\n      title: 'Downtime',\n      align: 'right',\n      // render: (value: number) => value.toFixed(PRECISION),\n      render: (row: any) => {\n        const [metric] = row.shorthand.split('/');\n        return formatTimeToMetric(Math.ceil(row.value), metric);\n      },\n    },\n    {\n      title: 'Shorthand',\n      dataIndex: 'shorthand',\n    },\n  ];\n\n  return (\n    <Table\n      pagination={false}\n      dataSource={downtimeDataSource}\n      // @ts-ignore\n      columns={columns}\n    />\n  );\n}\n\nexport const FormatTime: React.FC<{time: number}> = (props) => {\n  const [hover, setHover] = useState(false);\n  const { time } = props;\n\n  const seconds = formatTimeToMetric(time, 'seconds');\n  const minutes = formatTimeToMetric(time, 'minutes');\n  const hours = formatTimeToMetric(time, 'hours');\n\n  const content = hover\n    ? <>\n        {hours !== minutes ? `${hours} or ` : ''}\n        {minutes}\n        {' or '}\n        {seconds}\n      </>\n    : hours;\n\n\n  return (\n    <div\n      // title={title}\n      onMouseOver={() => setHover(true)}\n      onMouseOut={() =>setHover(false)}\n      >\n      {content}\n    </div>\n  );\n}\n\nexport const AvailabilityTable2: React.FC<{downtime: DowntimeTable}> = (props) => {\n  const { downtime } = props;\n\n  // const downtime = calculateDowntimeTableFromAvailbility(availability);\n  const downtimeDataSource = [\n    {\n      key: 'hoursPerDay',\n      name: 'Hours Per Day',\n      shorthand: 'hours/day',\n      // value: downtime.hoursPerDay,\n      value: downtime.secondsPerDay,\n    },\n    {\n      key: 'hoursPerWeek',\n      name: 'Hours Per Week',\n      shorthand: 'hours/week',\n      // value: downtime.hoursPerWeek,\n      value: downtime.secondsPerWeek,\n    },\n    {\n      key: 'hoursPerMonth',\n      name: 'Hours Per Month',\n      shorthand: 'hours/month',\n      // value: downtime.hoursPerMonth,\n      value: downtime.secondsPerMonth,\n    },\n    {\n      key: 'hoursPerYear',\n      name: 'Hours Per Year',\n      shorthand: 'hours/year',\n      // value: downtime.hoursPerYear,\n      value: downtime.secondsPerYear,\n    },\n  ];\n\n  const columns = [\n    {\n      title: 'Uptime',\n      align: 'right',\n      render: (row: any) => {\n        const [,metric] = row.shorthand.split('/');\n        let secondsInMetric = 86400;\n        switch (metric) {\n          case 'day':\n            break;\n\n          case 'week':\n            secondsInMetric *= 7;\n            break;\n\n          case 'month':\n            secondsInMetric *= 31;\n            break;\n\n          case 'year':\n            secondsInMetric *= 365;\n            break;\n        }\n        return <FormatTime time={secondsInMetric - row.value} />;\n      },\n    },\n    {\n      title: 'Downtime',\n      align: 'right',\n      render: (row: any) => {\n        return <FormatTime time={row.value} />;\n      },\n    },\n    {\n      title: 'Shorthand',\n      dataIndex: 'shorthand',\n      render: (shorthand: string) => {\n        const [,metric] = shorthand.split('/')\n        return `per ${metric}`;\n      },\n    },\n  ];\n\n  return (\n    <Table\n      tableLayout=\"fixed\"\n      pagination={false}\n      dataSource={downtimeDataSource}\n      // @ts-ignore\n      columns={columns}\n    />\n  );\n}\n\nexport const Availability: React.FC = () => {\n  const [availability, setAvailability] = useState(99.99);\n\n  return (\n    <>\n      <Row justify=\"center\">\n        <Col span=\"6\">\n          <InputNumber\n            style={{fontSize: '2rem', width: '12rem'}}\n            defaultValue={availability}\n            min={0}\n            max={100}\n            step={0.1}\n            onChange={(value) => value && setAvailability(value)}\n          />\n          %\n        </Col>\n      </Row>\n      <AvailabilityTable availability={availability} />\n    </>\n  );\n}","import React, { useState, useRef } from 'react';\nimport { Select, InputNumber, Row, Col } from 'antd';\nimport { AvailabilityTable2 } from './Availability';\nimport { calculateAvailability, calculateSecondsFromMetric, getDowntimeFromSeconds, getDowntimeFromAvailbility, calculateDowntimeTableFromMetric } from './fn';\n\nconst { Option } = Select;\n\nexport const ErrorBudget: React.FC = () => {\n  const [metric, setMetric] = useState('seconds/day');\n  const [secondsPerDay, setSecondsPerDay] = useState(60);\n  const [display, setDisplay] = useState(60);\n  const availability = calculateAvailability(display, metric);\n  const [metric2,] = metric.split('/');\n  const downtimeTable = calculateDowntimeTableFromMetric(display, metric2);\n  \n  const errorBudgetRef = useRef<any>();\n\n  const setAvailability = (newAvailability: number) => {\n    const current = errorBudgetRef.current;\n    if (!current) {\n      return;\n    }\n\n    const newSeconds = getDowntimeFromAvailbility(newAvailability, 'seconds/day');\n    const newDisplay = getDowntimeFromAvailbility(newAvailability, metric);\n    current.inputNumberRef.input.value = newDisplay;\n    setSecondsPerDay(newSeconds);\n    setDisplay(newDisplay);\n  }\n\n  return (\n    <>\n      <Row justify=\"center\">\n        <Col span=\"8\">\n          <div>\n            <InputNumber\n              ref={errorBudgetRef}\n              size=\"large\"\n              value={display}\n              min={0}\n              step={0.1}\n              onChange={(value) => {\n                if (!value) {\n                  return;\n                }\n                const [newMetric, ] = metric.split('/');\n                const newSeconds = calculateSecondsFromMetric(value, newMetric);\n                const newDisplay = getDowntimeFromSeconds(newSeconds, metric);\n                setSecondsPerDay(newSeconds)\n                setDisplay(newDisplay);\n              }}\n            />\n            <Select\n              defaultValue={metric}\n              size=\"large\"\n              onChange={(newMetric) => {\n                const downtime = getDowntimeFromSeconds(secondsPerDay, newMetric);\n                setMetric(newMetric);\n                setDisplay(downtime);\n              }}>\n              <Option value=\"seconds/day\">\n                seconds/day\n              </Option>\n              <Option value=\"minutes/day\">\n                minutes/day\n              </Option>\n              <Option value=\"hours/day\">\n                hours/day\n              </Option>\n              <Option value=\"seconds/week\">\n                seconds/week\n              </Option>\n              <Option value=\"minutes/week\">\n                minutes/week\n              </Option>\n              <Option value=\"hours/week\">\n                hours/week\n              </Option>\n              <Option value=\"seconds/month\">\n                seconds/month\n              </Option>\n              <Option value=\"minutes/month\">\n                minutes/month\n              </Option>\n              <Option value=\"hours/month\">\n                hours/month\n              </Option>\n              <Option value=\"seconds/year\">\n                seconds/year\n              </Option>\n              <Option value=\"minutes/year\">\n                minutes/year\n              </Option>\n              <Option value=\"hours/year\">\n                hours/year\n              </Option>\n            </Select>\n          </div>\n          <div>\n            <InputNumber\n              size=\"large\"\n              value={availability}\n              min={0}\n              max={100}\n              step={0.1}\n              style={{width: '14rem'}}\n              onChange={(value) => {\n                if (!value) {\n                  return;\n                }\n\n                // setErrorBudgetRef(getDowntimeFromAvailbility(value, metric));\n                setAvailability(value);\n              }}\n            />\n            %\n          </div>\n        </Col>\n      </Row>\n      <AvailabilityTable2 downtime={downtimeTable} />\n    </>\n  ) \n}","import React from 'react';\nimport './App.css';\nimport { ErrorBudget } from './components/ErrorBudget';\n\nfunction App() {\n  return (\n    <>\n      <ErrorBudget />\n      <ul>\n        <li>There may be some rounding errors, because we calculate the time based on availability.</li>\n        <li><a href=\"https://github.com/aizatto/error-budget\">GitHub: Source Code</a></li>\n      </ul>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}